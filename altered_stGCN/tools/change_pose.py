
import os
from pathlib import Path
import json
from pprint import pprint
import argparse
import csv
import pandas as pd

def list_video_names(videos_path, video_list_file):
    """
    Creates a file containing the list of all the video names for the videos in 'video_path'
    """
    with open(video_list_file, 'w') as f:
        p = Path(videos_path)
        for path in p.glob('*.avi'):
            video_path = str(path)
            video_name = (video_path.split('/')[-1]).split('.')[0]
            f.write(video_name + '\n')

def seperate_sequences(stgcn_data_array,dest_path):
    #print("in seperate")
    a = {}
    file_names = []
    p = list(range(1,66))
    dicts = sorted(stgcn_data_array, key=lambda k: int(k['label_index']))
    for i in p:
        new = [item for item in dicts if int(item['label_index']) == i]
        if not new:
            continue
        new = sorted(new, key=lambda k: int(k['frame_index']))
        seq = [x['frame_index'] for x in new]
        max_frames = len(seq)
        if max_frames > 1200:
            max_frames = 1200
            new = new[:max_frames]
        q = list(range(1,max_frames+1))
        #print(max_frames)
        for j in range(len(new)):
            new[j]['frame_index'] = q[j]
        new_path = dest_path.split('.')[0] + '_' + str(i) + '.json'
        file_names.append(dest_path.split('.')[0] + '_' + str(i))
        a['data'] = new
        with open(new_path, 'w') as outfile:
            json.dump(a, outfile)
        a.clear()
    with open('classwise_video_split.csv','wb') as file:
        for line in file_names:
            file.write(line)
            file.write("\n") 


def get_labels_frame(video_name,frame_id):
    dt = pd.read_csv('sorted_video_reordered.csv')
    for index, row in dt.iterrows():
        if row['filename'] == video_name:
            if row['st_frame'] <=frame_id<= row['end_frame']:
                return(row['label_index'],row['label'])
    return('66','None')

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='OpenPose to ST-GCN JSON format converter.')
    # folder that contains all the video that have been treated by OpenPose
    parser.add_argument('--videos_path', default='data/videos')
    # folder that contains all the JSON files generated by OpenPose (for all the frames of all the videos)
    parser.add_argument('--openpose_json_path', default='data/poses/openpose_format')
    # folder that will contain the converted files (one per video)
    parser.add_argument('--stgcn_json_path', default='data/poses/st-gcn_format')
    # file that will contain the list of all the video file names that were treated by OpenPose
    parser.add_argument('--video_list_file', default='data/data_list.dat')

    arg = parser.parse_args()

    list_video_names(arg.videos_path, arg.video_list_file)

    p = Path(arg.openpose_json_path)

    labels = {}
    with open(arg.video_list_file, 'r') as f:
        for line in f:
            video_name  = line.strip('\n')
            arg.stgcn_data_array = []
            stgcn_data = {}
            dest_path = arg.stgcn_json_path + video_name + '.json'
            for path in p.glob(video_name + '*.json'): # each json file for this video
                json_path = str(path)
                frame_id = int(((json_path.split('/')[-1]).split('.')[0]).split('_')[1])
                frame_data = {'frame_index': frame_id}
                #print(video_name)
                (l_ind,l) = get_labels_frame(video_name,frame_id)
                print(('frame_id',frame_id,l_ind,l))
                frame_data['label_index'] = l_ind
                frame_data['label'] = l
                data = json.load(open(json_path))
                skeletons = []
                for person in data['people']:
                    score, coordinates = [], []
                    skeleton = {}
                    keypoints = person['pose_keypoints_2d']
                    for i in range(0, len(keypoints), 3):
                        coordinates +=  [keypoints[i], keypoints[i + 1]]
                        score += [keypoints[i + 2]]
                    skeleton['pose'] = coordinates
                    skeleton['score'] = score
                    skeletons += [skeleton]
                frame_data['skeleton'] = skeletons
                arg.stgcn_data_array += [frame_data]
            print("I am here")
            seperate_sequences(arg.stgcn_data_array,dest_path)
            print(video_name)
            stgcn_data['data'] = arg.stgcn_data_array
            #with open(dest_path, 'w') as outfile:
                #json.dump(stgcn_data, outfile)


